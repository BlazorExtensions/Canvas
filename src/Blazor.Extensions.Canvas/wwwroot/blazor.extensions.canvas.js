(()=>{"use strict";var e={536:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ContextManager=void 0;const r=n(831);t.ContextManager=class{constructor(e){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.patterns=new Map,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.add=(e,t)=>{if(!e)throw new Error("Invalid canvas.");if(!this.contexts.get(e.id)){var n;if(!(n=t?e.getContext(this.contextName,t):e.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(e.id,n)}},this.remove=e=>{this.contexts.delete(e.id)},this.setProperty=(e,t,n)=>{const r=this.getContext(e);this.setPropertyWithContext(r,t,n)},this.getProperty=(e,t)=>{const n=this.getContext(e);return this.serialize(n[t])},this.call=(e,t,n)=>{const r=this.getContext(e);return this.callWithContext(r,t,n)},this.callBatch=(e,t)=>{const n=this.getContext(e);for(let e=0;e<t.length;e++){let r=t[e].slice(2);t[e][1]?this.callWithContext(n,t[e][0],r):this.setPropertyWithContext(n,t[e][0],Array.isArray(r)&&r.length>0?r[0]:null)}},this.callWithContext=(e,t,n)=>{const o=this.prototypes[t].apply(e,null!=n?n.map((e=>this.deserialize(t,e))):[]);if("createPattern"==t){const e=(0,r.v4)();return this.patterns.set(e,o),e}return this.serialize(o)},this.setPropertyWithContext=(e,t,n)=>{"fillStyle"==t&&(n=this.patterns.get(n)||n),e[t]=this.deserialize(t,n)},this.getContext=e=>{if(!e)throw new Error("Invalid canvas.");const t=this.contexts.get(e.id);if(!t)throw new Error("Invalid context.");return t},this.deserialize=(e,t)=>{if(!this.webGLContext||null==t)return t;if(t.hasOwnProperty("webGLType")&&t.hasOwnProperty("id"))return this.webGLObject[t.id];if(Array.isArray(t)&&!e.endsWith("v"))return Int8Array.of(...t);if("string"!=typeof t||"bufferData"!==e&&"bufferSubData"!==e)return t;{let e=window.atob(t),r=e.length,o=new Uint8Array(r);for(var n=0;n<r;n++)o[n]=e.charCodeAt(n);return o}},this.serialize=e=>{if(e instanceof TextMetrics)return{width:e.width};if(!this.webGLContext||null==e)return e;const t=this.webGLTypes.find((t=>e instanceof t));if(null!=t){const n=this.webGLObject.length;return this.webGLObject.push(e),{webGLType:t.name,id:n}}return e},this.contextName=e,"2d"===e)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl"!==e&&"experimental-webgl"!==e)throw new Error(`Invalid context name: ${e}`);this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0}}}},831:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return l.default}});var r=c(n(518)),o=c(n(948)),i=c(n(73)),a=c(n(186)),u=c(n(808)),l=c(n(775)),s=c(n(37)),f=c(n(910)),d=c(n(792));function c(e){return e&&e.__esModule?e:{default:e}}},311:(e,t)=>{function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,i,a){return r((u=r(r(t,e),r(o,a)))<<(l=i)|u>>>32-l,n);var u,l}function i(e,t,n,r,i,a,u){return o(t&n|~t&r,e,t,i,a,u)}function a(e,t,n,r,i,a,u){return o(t&r|n&~r,e,t,i,a,u)}function u(e,t,n,r,i,a,u){return o(t^n^r,e,t,i,a,u)}function l(e,t,n,r,i,a,u){return o(n^(t|~r),e,t,i,a,u)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let o=0;o<n;o+=8){const n=e[o>>5]>>>o%32&255,i=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(i)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let o=1732584193,s=-271733879,f=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const n=o,c=s,h=f,p=d;o=i(o,s,f,d,e[t],7,-680876936),d=i(d,o,s,f,e[t+1],12,-389564586),f=i(f,d,o,s,e[t+2],17,606105819),s=i(s,f,d,o,e[t+3],22,-1044525330),o=i(o,s,f,d,e[t+4],7,-176418897),d=i(d,o,s,f,e[t+5],12,1200080426),f=i(f,d,o,s,e[t+6],17,-1473231341),s=i(s,f,d,o,e[t+7],22,-45705983),o=i(o,s,f,d,e[t+8],7,1770035416),d=i(d,o,s,f,e[t+9],12,-1958414417),f=i(f,d,o,s,e[t+10],17,-42063),s=i(s,f,d,o,e[t+11],22,-1990404162),o=i(o,s,f,d,e[t+12],7,1804603682),d=i(d,o,s,f,e[t+13],12,-40341101),f=i(f,d,o,s,e[t+14],17,-1502002290),s=i(s,f,d,o,e[t+15],22,1236535329),o=a(o,s,f,d,e[t+1],5,-165796510),d=a(d,o,s,f,e[t+6],9,-1069501632),f=a(f,d,o,s,e[t+11],14,643717713),s=a(s,f,d,o,e[t],20,-373897302),o=a(o,s,f,d,e[t+5],5,-701558691),d=a(d,o,s,f,e[t+10],9,38016083),f=a(f,d,o,s,e[t+15],14,-660478335),s=a(s,f,d,o,e[t+4],20,-405537848),o=a(o,s,f,d,e[t+9],5,568446438),d=a(d,o,s,f,e[t+14],9,-1019803690),f=a(f,d,o,s,e[t+3],14,-187363961),s=a(s,f,d,o,e[t+8],20,1163531501),o=a(o,s,f,d,e[t+13],5,-1444681467),d=a(d,o,s,f,e[t+2],9,-51403784),f=a(f,d,o,s,e[t+7],14,1735328473),s=a(s,f,d,o,e[t+12],20,-1926607734),o=u(o,s,f,d,e[t+5],4,-378558),d=u(d,o,s,f,e[t+8],11,-2022574463),f=u(f,d,o,s,e[t+11],16,1839030562),s=u(s,f,d,o,e[t+14],23,-35309556),o=u(o,s,f,d,e[t+1],4,-1530992060),d=u(d,o,s,f,e[t+4],11,1272893353),f=u(f,d,o,s,e[t+7],16,-155497632),s=u(s,f,d,o,e[t+10],23,-1094730640),o=u(o,s,f,d,e[t+13],4,681279174),d=u(d,o,s,f,e[t],11,-358537222),f=u(f,d,o,s,e[t+3],16,-722521979),s=u(s,f,d,o,e[t+6],23,76029189),o=u(o,s,f,d,e[t+9],4,-640364487),d=u(d,o,s,f,e[t+12],11,-421815835),f=u(f,d,o,s,e[t+15],16,530742520),s=u(s,f,d,o,e[t+2],23,-995338651),o=l(o,s,f,d,e[t],6,-198630844),d=l(d,o,s,f,e[t+7],10,1126891415),f=l(f,d,o,s,e[t+14],15,-1416354905),s=l(s,f,d,o,e[t+5],21,-57434055),o=l(o,s,f,d,e[t+12],6,1700485571),d=l(d,o,s,f,e[t+3],10,-1894986606),f=l(f,d,o,s,e[t+10],15,-1051523),s=l(s,f,d,o,e[t+1],21,-2054922799),o=l(o,s,f,d,e[t+8],6,1873313359),d=l(d,o,s,f,e[t+15],10,-30611744),f=l(f,d,o,s,e[t+6],15,-1560198380),s=l(s,f,d,o,e[t+13],21,1309151649),o=l(o,s,f,d,e[t+4],6,-145523070),d=l(d,o,s,f,e[t+11],10,-1120210379),f=l(f,d,o,s,e[t+2],15,718787259),s=l(s,f,d,o,e[t+9],21,-343485551),o=r(o,n),s=r(s,c),f=r(f,h),d=r(d,p)}return[o,s,f,d]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))}},140:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},808:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},792:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(37))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}},656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},858:(e,t)=>{let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const r=new Uint8Array(16)},42:(e,t)=>{function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const i=e.length/4+2,a=Math.ceil(i/16),u=new Array(a);for(let t=0;t<a;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];u[t]=n}u[a-1][14]=8*(e.length-1)/Math.pow(2,32),u[a-1][14]=Math.floor(u[a-1][14]),u[a-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<a;++e){const i=new Uint32Array(80);for(let t=0;t<16;++t)i[t]=u[e][t];for(let e=16;e<80;++e)i[e]=r(i[e-3]^i[e-8]^i[e-14]^i[e-16],1);let a=o[0],l=o[1],s=o[2],f=o[3],d=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),u=r(a,5)+n(o,l,s,f)+d+t[o]+i[e]>>>0;d=f,f=s,s=r(l,30)>>>0,l=a,a=u}o[0]=o[0]+a>>>0,o[1]=o[1]+l>>>0,o[2]=o[2]+s>>>0,o[3]=o[3]+f>>>0,o[4]=o[4]+d>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},910:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=a;var r,o=(r=n(37))&&r.__esModule?r:{default:r};const i=[];for(let e=0;e<256;++e)i.push((e+256).toString(16).slice(1));function a(e,t=0){return i[e[t+0]]+i[e[t+1]]+i[e[t+2]]+i[e[t+3]]+"-"+i[e[t+4]]+i[e[t+5]]+"-"+i[e[t+6]]+i[e[t+7]]+"-"+i[e[t+8]]+i[e[t+9]]+"-"+i[e[t+10]]+i[e[t+11]]+i[e[t+12]]+i[e[t+13]]+i[e[t+14]]+i[e[t+15]]}t.default=function(e,t=0){const n=a(e,t);if(!(0,o.default)(n))throw TypeError("Stringified UUID is invalid");return n}},518:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(858))&&r.__esModule?r:{default:r},i=n(910);let a,u,l=0,s=0;t.default=function(e,t,n){let r=t&&n||0;const f=t||new Array(16);let d=(e=e||{}).node||a,c=void 0!==e.clockseq?e.clockseq:u;if(null==d||null==c){const t=e.random||(e.rng||o.default)();null==d&&(d=a=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==c&&(c=u=16383&(t[6]<<8|t[7]))}let h=void 0!==e.msecs?e.msecs:Date.now(),p=void 0!==e.nsecs?e.nsecs:s+1;const y=h-l+(p-s)/1e4;if(y<0&&void 0===e.clockseq&&(c=c+1&16383),(y<0||h>l)&&void 0===e.nsecs&&(p=0),p>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");l=h,s=p,u=c,h+=122192928e5;const v=(1e4*(268435455&h)+p)%4294967296;f[r++]=v>>>24&255,f[r++]=v>>>16&255,f[r++]=v>>>8&255,f[r++]=255&v;const b=h/4294967296*1e4&268435455;f[r++]=b>>>8&255,f[r++]=255&b,f[r++]=b>>>24&15|16,f[r++]=b>>>16&255,f[r++]=c>>>8|128,f[r++]=255&c;for(let e=0;e<6;++e)f[r+e]=d[e];return t||(0,i.unsafeStringify)(f)}},948:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(25)),o=i(n(311));function i(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)("v3",48,o.default);t.default=a},25:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function r(e,r,a,u){var l;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=(0,i.default)(r)),16!==(null===(l=r)||void 0===l?void 0:l.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let s=new Uint8Array(16+e.length);if(s.set(r),s.set(e,r.length),s=n(s),s[6]=15&s[6]|t,s[8]=63&s[8]|128,a){u=u||0;for(let e=0;e<16;++e)a[u+e]=s[e];return a}return(0,o.unsafeStringify)(s)}try{r.name=e}catch(e){}return r.DNS=a,r.URL=u,r};var r,o=n(910),i=(r=n(792))&&r.__esModule?r:{default:r};const a="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=a;const u="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=u},73:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=a(n(140)),o=a(n(858)),i=n(910);function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const a=(e=e||{}).random||(e.rng||o.default)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=a[e];return t}return(0,i.unsafeStringify)(a)}},186:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(25)),o=i(n(42));function i(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)("v5",80,o.default);t.default=a},37:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(656))&&r.__esModule?r:{default:r};t.default=function(e){return"string"==typeof e&&o.default.test(e)}},775:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(37))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}(()=>{const e=n(536);var t;!function(t){const n="BlazorExtensions",r={Canvas2d:new e.ContextManager("2d"),WebGL:new e.ContextManager("webgl")};t.initialize=function(){"undefined"==typeof window||window[n]?window[n]=Object.assign(Object.assign({},window[n]),r):window[n]=Object.assign({},r)}}(t||(t={})),t.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,